// Generated by CoffeeScript 2.4.1
(function() {
  var indexOf = [].indexOf;

  if (!Object.keys) {
    // console.warn ("Esse navegador não implementou a função Object.keys(myObj). Podem ocasionar Bugs. Discuta com a equipe qual ação deve ser tomada.")
    Object.keys = function(obj) {
      var prop, results;
      results = [];
      for (prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          results.push(prop);
        }
      }
      return results;
    };
  }

  if (!Object.values) {
    // Como usar:
    // Object.values({a: 1, b: "2"}) # retorna [1, "2"]
    Object.values = function(obj) {
      return Object.keys(obj).map(function(key) {
        return obj[key];
      });
    };
  }

  // else
  //   console.warn ("Esse navegador implementou a função Object.values(myObj), e está sobrescrevendo a que foi implementada manualmente nesse sistema. Podem ocasionar Bugs. Discuta com a equipe qual ação deve ser tomada.")
  if (!Object.slice) {
    // Como usar
    // Ex: 1
    // Object.slice({a:1, b: 2, c: 3, d: 4}, 'a', 'd') # return {a:1, d:4}
    // Ex 2:
    // keys = ['a', 'd']
    // Object.slice({a:1, b: 2, c: 3, d: 4}, keys...) # return {a:1, d:4}
    Object.slice = function(obj, ...props) {
      var i, j, len, prop, ret;
      ret = {};
      i = 0;
      for (j = 0, len = props.length; j < len; j++) {
        prop = props[j];
        prop = props[i];
        if (obj.hasOwnProperty(prop)) {
          ret[prop] = obj[prop];
        }
        i += 1;
      }
      return ret;
    };
  }

  if (!Object.reject) {
    // Como usar
    // Ex: 1
    // Object.reject({a:1, b: 2, c: 3, d: 4}, 'a', 'd') # return {b:2, c:3}
    // Ex 2:
    // keys = ['a', 'd']
    // Object.reject({a:1, b: 2, c: 3, d: 4}, keys...) # return {b:2, c:3}
    Object.reject = function(obj, ...keys) {
      var k, res, v;
      res = {};
      for (k in obj) {
        v = obj[k];
        if (!(indexOf.call(keys, k) >= 0)) {
          res[k] = v;
        }
      }
      return res;
    };
  }

  if (!Object.blank) {
    // console.warn ("Esse navegador não implementou a função Object.blank(myObj). Podem ocasionar Bugs. Discuta com a equipe qual ação deve ser tomada.")
    Object.blank = function(val) {
      if (['number', 'boolean', 'function'].include(typeof val)) {
        return false;
      }
      if (val == null) {
        return true;
      }
      if (['string'].include(typeof val)) {
        return val.empty();
      }
      return Object.empty(val);
    };
  }

  if (!Object.empty) {
    // console.warn ("Esse navegador não implementou a função Object.empty(myObj). Podem ocasionar Bugs. Discuta com a equipe qual ação deve ser tomada.")
    Object.empty = function(obj) {
      return Object.keys(obj).empty();
    };
  }

  if (!Object.any) {
    // console.warn ("Esse navegador não implementou a função Object.any(myObj). Podem ocasionar Bugs. Discuta com a equipe qual ação deve ser tomada.")
    Object.any = function(obj) {
      return Object.keys(obj).any();
    };
  }

  if (!Object.many) {
    // console.warn ("Esse navegador não implementou a função Object.many(myObj). Podem ocasionar Bugs. Discuta com a equipe qual ação deve ser tomada.")
    Object.many = function(obj) {
      return Object.keys(obj).many();
    };
  }

  if (!Object.delete) {
    Object.delete = function(obj, key) {
      delete obj[key];
      return obj;
    };
  }

  if (!Object.equals) {
    // console.warn ("Esse navegador não implementou a função Object.equals(obj1, obj2). Podem ocasionar Bugs. Discuta com a equipe qual ação deve ser tomada.")
    Object.equals = function(obj1, obj2) {
      var obj;
      if (obj1 === obj2) {
        return true;
      }
      if (!(obj1 instanceof Object) || !(obj2 instanceof Object)) {
        // if both obj1 and obj2 are null or undefined and exactly the same
        return false;
      }
      if (obj1.constructor !== obj2.constructor) {
        // if they are not strictly equal, they both need to be Objects
        return false;
      }
// they must have the exact same prototype chain, the closest we can do is
// test there constructor.
      for (obj in obj1) {
        if (!obj1.hasOwnProperty(obj)) {
          continue;
        }
        if (!obj2.hasOwnProperty(obj)) {
          // other properties were tested using obj1.constructor == obj2.constructor
          return false;
        }
        if (obj1[obj] === obj2[obj]) {
          // allows to compare obj1[ obj ] and obj2[ obj ] when set to undefined
          continue;
        }
        if (typeof obj1[obj] !== "object") {
          // if they have the same strict value or identity then they are equal
          return false;
        }
        if (!Object.equals(obj1[obj], obj2[obj])) {
          // Numbers, Strings, Functions, Booleans must be strictly equal
          return false;
        }
      }
// Objects and Arrays must be tested recursively
      for (obj in obj2) {
        if (obj2.hasOwnProperty(obj) && !obj1.hasOwnProperty(obj)) {
          return false;
        }
      }
      // allows obj1[ obj ] to be set to undefined
      return true;
    };
  }

}).call(this);
