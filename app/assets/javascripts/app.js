// Generated by CoffeeScript 2.4.1
(function() {
  var app;

  app = angular.module('publicidade_app', ['ngSanitize']);

  app.controller('MainCtrl', [
    '$http',
    '$timeout',
    function($http,
    $timeout) {
      var vm;
      vm = this;
      vm.tentar = 10;
      vm.tentativas = 0;
      vm.init = function() {
        var onError,
    onSuccess;
        vm.loading = true;
        onSuccess = function(data) {
          vm.loading = false;
          console.log(data);
          vm.tentativas = 0;
          return vm.timeline.init();
        };
        onError = function() {
          vm.loading = false;
          vm.tentativas++;
          if (vm.tentativas > vm.tentar) {
            console.log('Não foi possível comunicar com o servidor!');
            return;
          }
          vm.tentarNovamenteEm = 1000 * vm.tentativas;
          console.log(`tentando em ${vm.tentarNovamenteEm} segundos`);
          return $timeout((function() {
            return vm.init();
          }),
    vm.tentarNovamenteEm);
        };
        return vm.getGrade(onSuccess,
    onError);
      };
      vm.timeline = {
        next: {},
        tipos: ['conteudos',
    'musicas',
    'mensagens'],
        current: {},
        nextIndex: {},
        transicao: {},
        init: function() {
          var i,
    len,
    ref,
    results,
    tipo;
          ref = this.tipos;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            tipo = ref[i];
            this.nextIndex[tipo] = 0;
            results.push(this.executar(tipo));
          }
          return results;
        },
        executar: function(tipo) {
          var index,
    lista,
    segundos;
          lista = vm.grade[tipo] || [];
          this.transicao[tipo] = false;
          if (!lista.length) {
            return;
          }
          index = this.nextIndex[tipo];
          if (index >= lista.length) {
            index = 0;
          }
          this.nextIndex[tipo]++;
          if (this.nextIndex[tipo] >= lista.length) {
            this.nextIndex[tipo] = 0;
          }
          this.current[tipo] = lista[index];
          this.next[tipo] = lista[this.nextIndex[tipo]];
          console.log(this.current[tipo]);
          console.log('segundos',
    this.current[tipo].segundos * 10000);
          segundos = (this.current[tipo].segundos * 1000) || 5000;
          $timeout((function() {
            return vm.timeline.transicao[tipo] = true;
          }),
    segundos - 250);
          return $timeout((function() {
            return vm.timeline.executar(tipo);
          }),
    segundos);
        }
      };
      vm.getGrade = function(callbackSuccess,
    callbackError) {
        return $http({
          method: 'GET',
          url: '/grade'
        }).then(function(resp) {
          vm.grade = resp.data;
          return typeof callbackSuccess === "function" ? callbackSuccess(resp.data) : void 0;
        },
    function(resp) {
          var ref;
          console.error('Erro:',
    (ref = resp.data) != null ? ref.error : void 0);
          if (typeof callbackError === "function") {
            callbackError();
          }
        });
      };
      return vm;
    }
  ]);

}).call(this);
