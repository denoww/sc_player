@import "_sc-colors.scss";
@import "sistema/responsive_vars.scss";
@import "_sc-helpers";

// text sizes, margin e padding
@mixin config-feature($brkp-name: false) {
  @if $brkp-name == false {
    $brkp-name: '';
  } @else {
    $brkp-name: -#{$brkp-name};
  }
  // colors
  @each $color in $sc-colors {
    $color-name:  nth($color, 1);
    $color-value: nth($color, 2);
    // text
    .sc-text-#{$color-name}#{$brkp-name} { color: $color-value }
    // bg
    .sc-bg-#{$color-name}#{$brkp-name} { background-color: $color-value }
  }
  @each $size in $sc-sizes {
    $size-name:  nth($size, 1);
    $size-value: nth($size, 2);
    // text sizes
    .sc-text-#{$size-name}#{$brkp-name} { font-size: sc-text-size($size-name) }
    // margin
    .sc-m-#{$size-name}#{$brkp-name} { margin: $size-value }
    @if $size-name == 'xs' {
      .sc-m-none#{$brkp-name}, .sc-m-o#{$brkp-name} { margin: 0 !important }
    }
    @each $side in $sc-space-sides {
      $side-name:   nth($side, 1);
      $side-values: nth($side, 2);
      .sc-m-#{$side-name}-#{$size-name}#{$brkp-name} {
        @each $side-value in $side-values{
          margin-#{$side-value}: $size-value
        }
      }
      @if $size-name == 'xs' {
        .sc-m-#{$side-name}-none#{$brkp-name}, .sc-m-#{$side-name}-o#{$brkp-name} {
          @each $side-value in $side-values{
            margin-#{$side-value}: 0 !important
          }
        }
      }
    }
    // padding
    .sc-p-#{$size-name}#{$brkp-name} { padding: $size-value }
    @if $size-name == 'xs' {
      .sc-p-none#{$brkp-name}, .sc-p-o#{$brkp-name} { padding: 0 !important }
    }
    @each $side in $sc-space-sides {
      $side-name:   nth($side, 1);
      $side-values: nth($side, 2);
      .sc-p-#{$side-name}-#{$size-name}#{$brkp-name} {
        @each $side-value in $side-values{
          padding-#{$side-value}: $size-value
        }
      }
      @if $size-name == 'xs' {
        .sc-p-#{$side-name}-none#{$brkp-name}, .sc-p-#{$side-name}-o#{$brkp-name} {
          @each $side-value in $side-values{
            padding-#{$side-value}: 0 !important
          }
        }
      }
    }
  }
}

@include config-feature; // features sem breakpoints

// features com breakpoints
$i: 0;
$brkp-length: length($sc-breakpoints);

@each $brkp in $sc-breakpoints {

  $brkp-name: nth($brkp, 1);
  $brkp-value: nth($brkp, 2);

  $i: $i + 1;
  $is-first-element: $i == 1;
  $is-last-element: $brkp-length == $i;

  // .visible-#{$brkp-name}{ display: none !important; }
  @if $is-first-element {
    // o valor para XS tem o mesmo comportamento do valor original da classe
    // @include config-feature($brkp-name);
  }@else{
    @media (min-width: #{$brkp-value}px) {
      @include config-feature($brkp-name);
    }
  }
}

// generate sc-border-solid
@each $border-style in $sc-border-styles {
  .sc-border-#{$border-style}{
    @if $border-style == 'none' {
      border: $border-style !important;
    } @else {
      border-style: $border-style;
      border-width: 1px
    }
  }
}

// generate: sc-border-t-solid
@each $side in $sc-border-sides {
  $side-name:  nth($side, 1);
  $side-values: nth($side, 2);
  @each $border-style in $sc-border-styles {
    .sc-border-#{$side-name}-#{$border-style} {
      @each $side-value in $side-values {
        @if $border-style == 'none' {
          border-#{$side-value}: $border-style !important
        } @else {
          border-#{$side-value}: 1px $border-style
        }
      }
    }
  }
}

// generate sc-border-md
@each $size in $sc-border-sizes {
  $size-name: nth($size, 1);
  $size-value: nth($size, 2);
  .sc-border-#{$size-name}{
    border-width: $size-value
  }
}

// generate: sc-border-red-dark
@each $color in $sc-colors {
  $color-name:  nth($color, 1);
  $color-value: nth($color, 2);
  .sc-border-#{$color-name}{
    border-color: $color-value
  }
}

.sc-text-justified{ text-align: justify }

// text align
.align-left    { text-align: left    !important }
.align-right   { text-align: right   !important }
.align-center  { text-align: center  !important }
.align-justify { text-align: justify !important }

.sc-align-middle {
  display: inline-table;
  &.sc-align-middle-fixed{
    table-layout:fixed;width:100%;overflow:hidden;
  }

  & > * {
    display: table-cell;
    vertical-align: middle;
  }

  & > .elastic{ width:100%; }
  & > .icon{ width: 2em; }
}

.sc-align-top {
  display: inline-table;
  &.sc-align-middle-fixed{
    table-layout:fixed;width:100%;overflow:hidden;
  }

  & > * {
    display: table-cell;
    vertical-align: top;
  }

  & > .elastic{ width:100%; }
  & > .icon{ width: 2em; }
}

.sc-align-bottom {
  display: inline-table;
  &.sc-align-middle-fixed{
    table-layout:fixed;width:100%;overflow:hidden;
  }

  & > * {
    display: table-cell;
    vertical-align: bottom;
  }

  & > .elastic{ width:100%; }
  & > .icon{ width: 2em; }
}

.sc-break-word { word-wrap : break-word; }
.sc-real-size { font-size: 1rem }

// variation text
.sc-text-thinner      { font-weight: 100; }
.sc-text-thin         { font-weight: 300; }
.sc-text-normal       { font-weight: 400; }
.sc-text-medium       { font-weight: 500; }
.sc-text-bold         { font-weight: 700; }
.sc-text-italic       { font-style: italic; }
.sc-text-lowercase    { text-transform: lowercase; }
.sc-text-uppercase    { text-transform: uppercase; }
.sc-text-capitalize   { text-transform: capitalize; }
.sc-text-underline    { text-decoration: underline; }
.sc-text-small-caps   { font-variant: small-caps; }
.sc-text-line-through { text-decoration: line-through; }
.sc-text-no-decoration { text-decoration: none !important; }

.sc-border-radius        { @include sc-border-radius;               }
$sc-full-radius: 1000em;
.sc-border-radius-full   { @include sc-border-radius-full;          }
img.sc-border-radius-full{ border-radius: 100%;}

// aligns
.pull-left { float: left;   }
.pull-right { float: right; }

.sc-nowrap{white-space:nowrap}

.sc-ellipsis-inline {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: inline-block;
  max-width: 100%;
}

.sc-ellipsis {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: block;
  max-width: 100%;
}

// overflow
.overflow-auto{
  overflow: auto;
}
.overflow-auto-x {
  overflow-x: auto;
}
.overflow-auto-y {
  overflow-y: auto;
}

.overflow-hidden {
  overflow: hidden;
}
.overflow-hidden-x{
  overflow-x: hidden;
}
.overflow-hidden-y{
  overflow-y: hidden;
}

// clear
.clearfix::after,.clearfix::before{
  display: table;
  content: ' ';
}
.clearfix::after{ clear: both; }

.hide { display: none; }
